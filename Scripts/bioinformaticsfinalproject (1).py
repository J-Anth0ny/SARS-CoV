# -*- coding: utf-8 -*-
"""BioinformaticsFinalProject

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m_3mriDz3AhJaIPYWmk9gldhcV-mTL0g

SARS-COV Project description: You are in charge of a public health office in a large metropolitan area. There’s currently a COVID-19 outbreak, and due to recent budget cuts, you’ve also been appointed as the new bioinformatics expert (congratulations on the promotion!). Your responsibilities now include developing a pipeline to analyze NGS sequencing data for genome assembly, mutation detection, and lineage identification of sequenced samples.

You have two genomes to work with, and your pipeline should be capable of identifying mutations in both.

To achieve full credit (100%), submit the following deliverables:

1) Two tables (DataFrames) listing mutations for each genome.

2) A third table showing mutations shared between both genomes.

3) A simple chart (using any of the chart types introduced in the previous module) that visualizes an aspect of the data.
"""

### Here we are installing various tools that we will be using for our pipeline

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
!apt install bcftools
!apt install samtools
!pip install cyvcf2
!apt install bwa

#### Here we are downloading our 2 SARS Samples

!gdown 1J6nku7fSKE5t9yGgw0m1sUGy6regdmeb
!gdown 1e05YYPAHcKEjNYgwMntknvKY-Je-W2bh

### Here we are downloading out reference genome to compare our samples to

!gdown 1yTOH-9w0RbcBhwetNWzYxFXENtiyPlzW

### Here we are creating an index for our reference genome WuhanRef.fasta using bwa. The new index files will have the prefix Wuhan.

!bwa index -p Wuhan WuhanRef.fasta

### Here we are using a function to align our sequencing reads to our reference genome, Wuhan, and saving output the files in BAM format.

!bwa mem Wuhan SARS.R1.fastq > SARS.R1_aligned.bam
!bwa mem Wuhan SARS.R2.fastq > SARS.R2_aligned.bam

### We use the following commands to filter our BAM files to only include reads with a mapping quality of 12 or higher and then sort the reads based on their genomic position in the reference genome.
### The new sorted bam files are saved as SARS.R1_aligned.bam.sorted and SARS.R2_aligned.bam.sorted

!samtools view -bS -q 12 SARS.R1_aligned.bam | samtools sort -o SARS.R1_aligned.bam.sorted
!samtools view -bS -q 12 SARS.R2_aligned.bam | samtools sort -o SARS.R2_aligned.bam.sorted

### We use the following command to call variants in our SARS.R1 bam file against the reference genome and creating a VCF file that only contains the variants and their locations.

!bcftools mpileup -f WuhanRef.fasta --max-depth  2000 SARS.R1_aligned.bam.sorted  | bcftools call --multiallelic-caller --variants-only --ploidy 1  -mv -Oz -o SARS.R1.Variants.vcf.gz

### We use the following command to call variants in our SARS.R2 bam file against the reference genome and creating a VCF file that only contains the variants and their locations.

!bcftools mpileup -f WuhanRef.fasta --max-depth  2000 SARS.R2_aligned.bam.sorted  | bcftools call --multiallelic-caller --variants-only --ploidy 1  -mv -Oz -o SARS.R2.Variants.vcf.gz

### We use the following command to decompresses our SARS.R1.Variants.vcf.gz file and create an uncompressed SARS.R1.Variants.vcf

!gzip -df SARS.R1.Variants.vcf.gz

### We use the following command to decompresses our SARS.R2.Variants.vcf.gz file and create an uncompressed SARS.R2.Variants.vcf

!gzip -df SARS.R2.Variants.vcf.gz

### Here we assign our two vcf files to the variables vcf_path and vcf_path2

vcf_path = 'SARS.R1.Variants.vcf'
vcf_path2 = 'SARS.R2.Variants.vcf'

### We use the following code to read our VCF file (SARS.R1.Variants.vcf) as a tab-separated value file and look at information such as chromosome position and quality score.

import cyvcf2


vcf_reader = cyvcf2.VCF(vcf_path)

with open('output1.tsv', 'w') as file:

    for variant in vcf_reader:

        genotype = variant.gt_types[0]
        data_string = f"{variant.CHROM}\t{variant.POS}\t{variant.ID}\t{variant.REF}\t{','.join(variant.ALT)}\t{variant.QUAL}\t{variant.FILTER}\t{genotype}\n"

        file.write(data_string)

### We use the following code to read our VCF file (SARS.R2.Variants.vcf) as a tab-separated value file and look at information such as chromosome position and quality score.

import cyvcf2


vcf_reader = cyvcf2.VCF(vcf_path2)

with open('output2.tsv', 'w') as file:

    for variant in vcf_reader:

        genotype = variant.gt_types[0]
        data_string = f"{variant.CHROM}\t{variant.POS}\t{variant.ID}\t{variant.REF}\t{','.join(variant.ALT)}\t{variant.QUAL}\t{variant.FILTER}\t{genotype}\n"

        file.write(data_string)

import pandas as pd

### Here we use pandas to create two dataframes that contain the information of our two vcf files. We defined our column titles according to the columns in our TSV files.

columns = ['CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'GENOTYPE']
df1 = pd.read_csv("output1.tsv", delimiter = "\t", header=None, names=columns)
df2 = pd.read_csv("output2.tsv", delimiter = "\t", header=None, names=columns)

### Here we are displaying our first data frame that shows the mutations present in our first genome/SARS.R1.Variants.vcf

df1

### Here we are displaying our first data frame that shows the mutations present in our second genome/SARS.R2.Variants.vcf

df2

### Here we are displaying our third data frame that shows the mutations shared between our two genes/the two previous data frames

df_same = df1[df1['CHROM'].isin(df2['CHROM']) & df1['POS'].isin(df2['POS'])]
df_same

### Here we combine both genome mutation counts to create a bar graph that shows counts per chromosome for each genome. In this case, the mutations were only on one chromosome.

genome1_counts = df1.groupby('CHROM').size().reset_index(name='Mutation_Count')
genome1_counts['Genome'] = 'Genome1'

genome2_counts = df2.groupby('CHROM').size().reset_index(name='Mutation_Count')
genome2_counts['Genome'] = 'Genome2'

mutation_counts = pd.concat([genome1_counts, genome2_counts])

plt.figure(figsize=(10, 6))
sns.barplot(x='CHROM', y='Mutation_Count', hue='Genome', data=mutation_counts)
plt.title('Number of Mutations per Chromosome for Genome 1 and Genome 2')
plt.xlabel('Chromosome')
plt.ylabel('Mutation Count')
plt.show()